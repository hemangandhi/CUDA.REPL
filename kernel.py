def mk_kernel(name, types, access, lines = []):
    """Make a kernel called name with arguments and access specified.
       default>%mk_kernel name "int * v, char z" __global__
       generates the following signature:
       __global__ name(int * v, char z)"""
    return {"name": name, "types": types, "access": access, "lines": lines}

def add_line(kernel, line, where = None):
    """Add a line to a kernel. Can pass in a number to add it to that
       (zero-indexed) position."""
    if where == None:
        where = len(kernel["lines"])
    if not line.endswith(';') and not line.endswith('{'):
        line = line + ';'
    kernel["lines"].insert(where, line)
    if where < len(kernel["lines"]):
        return '\n'.join(kernel["lines"])

def remove_line(kernel, where = 0):
    """Remove the first line. Optionally provide a 0-based
       index."""
    tmp = kernel['lines'][where]
    del kernel['lines'][where]
    return tmp

def gen_code(kernel):
    """Generate a representation of the CUDA generated by the kernel specified."""
    signature =  " ".join([kernel["access"], "void", kernel["name"], "(", kernel["types"], ")"]) + "{\n"
    return signature + '\n'.join(kernel["lines"]) + '\n}'

def clear(kernel):
    """Remove all the code in a kernel"""
    kernel["lines"] = []
